{"name":"blutils","tagline":"utilities for bluebird control flow","body":"# Synopsis\r\n\r\n**blutils** is a utility library for [bluebird](https://github.com/petkaantonov/bluebird) and a direct fork of [qtils](https://github.com/pluma/qtils).\r\n\r\n[![stability 2 - unstable](http://b.repl.ca/v1/stability-2_--_unstable-yellow.png)](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/blutils)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/blutils.png?branch=master)](https://travis-ci.org/pluma/blutils) [![Coverage Status](https://coveralls.io/repos/pluma/blutils/badge.png?branch=master)](https://coveralls.io/r/pluma/blutils?branch=master) [![Dependencies](https://david-dm.org/pluma/blutils.png?theme=shields.io)](https://david-dm.org/pluma/blutils)\r\n\r\n[![NPM status](https://nodei.co/npm/blutils.png?compact=true)](https://npmjs.org/package/blutils)\r\n\r\n# Note\r\n\r\nWhen dealing with multiple arguments in promises, it is customary to pass them around as arrays. Until EcmaScript 6 destructuring becomes widely available, this makes promise control flows with multiple promises a bit unpractical when you can't use `.spread`.\r\n\r\nIf you find yourself using `.spread` a lot but still want to give the array manipulation helpers in this library a try, consider using [spread-args](https://github.com/pluma/spread-args) to convert functions that take positional arguments into functions that accept a simple argument array.\r\n\r\nAs of version 0.4, `blutils.transform` has been removed. Consider using [transform-object](https://github.com/pluma/transform-object) instead.\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install blutils\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/blutils.git\r\ncd blutils\r\nnpm install\r\nmake test\r\n```\r\n\r\n# API\r\n\r\n## append(fn:Function):Function\r\n\r\nCreates a function that will pass its argument to the given function and returns a promise that will be resolved to the function's result appended to the argument.\r\n\r\nIf the argument is not an `Array`, it will be wrapped in one before the result is appended.\r\n\r\nExample:\r\n\r\n```javascript\r\nPromise.cast('foo')\r\n.then(blutils.append(function(str) {\r\n    return str.replace('f', 'b');\r\n}))\r\n.then(console.log); // ['foo', 'boo']\r\n```\r\n\r\n## prepend(fn:Function):Function\r\n\r\nCreates a function that will pass its argument to the given function and returns a promise that will be resolved to the function's result prepended to the argument.\r\n\r\nIf the argument is not an `Array`, it will be wrapped in one before the result is prepended.\r\n\r\nExample:\r\n\r\n```javascript\r\nPromise.cast('foo')\r\n.then(blutils.prepend(function(str) {\r\n    return str.replace('f', 'b');\r\n}))\r\n.then(console.log); // ['boo', 'foo']\r\n```\r\n\r\n## tee(fn:Function):Function\r\n\r\nCreates a function that will pass its argument to the given function and returns a promise that will be resolved to the argument when the function's result is fulfilled.\r\n\r\nIn other words, `tee` allows you to add `then`able side-effects to a promise chain (without having to modify them so they return their inputs).\r\n\r\nExample without `tee`:\r\n\r\n```javascript\r\nPromise.cast('foo')\r\n.then(function(str) {\r\n    console.log('Result is:', str); // 'Result is: \"foo\"'\r\n    return str; // Must return the input or next `then` will see `null`\r\n})\r\n.then(console.log); // 'foo'\r\n```\r\n\r\nExample with `tee`:\r\n\r\n```javascript\r\nPromise.cast('foo')\r\n.then(blutils.tee(function(str) {\r\n    console.log('Result is:', str); // 'Result is: \"foo\"'\r\n}))\r\n.then(console.log); // 'foo'\r\n```\r\n\r\n## seq(fns...):Function\r\n\r\nCreates a function that will pass its argument to the given functions in sequence and returns a promise that resolves to the sequence's result.\r\n\r\nThis is mostly equivalent to `then`ing the functions:\r\n\r\n```javascript\r\nPromise.cast('foo')\r\n.then(blutils.seq(\r\n    function(str) {return str.toUpperCase();},\r\n    function(str) {return str.slice(0, 1).toLowerCase() + str.slice(1);}\r\n))\r\n.then(console.log); // 'fOO'\r\n```\r\n\r\n## guard(fn, handleRejection):Function\r\n\r\nCreates a function that will pass its argument to the given function and returns a promise that resolves to the sequence's result or the result of `handleRejection` if the function fails.\r\n\r\nNaive example without `guard`:\r\n\r\n```javascript\r\nfrobnicateDoodads()\r\n.then(embiggenDoodads)\r\n.catch(recoverFromEmbiggeningFailure) // will also trigger if frobnication fails\r\n.then(rasterizeDoodads)\r\n.catch(recoverFromRasterizationFailure) // will also trigger if recovery from embiggening failure fails\r\n.done(logResults, logFailure);\r\n```\r\n\r\nNon-naive example without `guard`:\r\n\r\n```javascript\r\nfrobnicateDoodads()\r\n.then(function(doodads) {\r\n    return Promise.cast(doodads)\r\n    .then(embiggenDoodads)\r\n    .catch(recoverFromEmbiggeningFailure);\r\n})\r\n.then(function(doodads) {\r\n    return Promise.cast(doodads)\r\n    .then(rasterizeDoodads)\r\n    .catch(recoverFromRasterizationFailure);\r\n})\r\n.done(logResults, logFailure);\r\n```\r\n\r\nExample with `guard`:\r\n\r\n```javascript\r\nfrobnicateDoodads()\r\n.then(blutils.guard( // only called if frobnication was successful\r\n    embiggenDoodads,\r\n    recoverFromEmbiggeningFailure // only catches embiggening failures\r\n))\r\n.then(blutils.guard( // only called if embiggening was successful\r\n    rasterizeDoodads,\r\n    recoverFromRasterizationFailure // only catches rasterization failures\r\n))\r\n.done(logResults, logFailure);\r\n```\r\n\r\n## eacharg(fns...):Function\r\n\r\nCreates a function that will pass each item in an array to each function and returns a promise that will be resolved to an array containing the results.\r\n\r\nIf the number of functions is smaller than the number of items in the array, it will loop over the functions.\r\n\r\nExample:\r\n\r\n```javascript\r\nPromise.cast(['Foo', 'Bar', 'Qux'])\r\n.then(blutils.eacharg(\r\n    function(str) {return str.toUpperCase();},\r\n    function(str) {return str.toLowerCase();}\r\n))\r\n.then(console.log); // ['FOO', 'bar', 'QUX']\r\n```\r\n\r\n## allargs(fns...):Function\r\n\r\nCreates a function that will pass its argument to each function and returns a promise that will be resolved to an array containing the results.\r\n\r\nExample:\r\n\r\n```javascript\r\nPromise.cast(['foo', 'bar', 'qux'])\r\n.then(blutils.allargs(\r\n    function(arr) {return arr.join('-');},\r\n    function(arr) {return arr.join('+');}\r\n))\r\n.then(console.log); // ['foo-bar-qux', 'foo+bar+qux']\r\n```\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/blutils/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}